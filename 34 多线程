线程
线程是计算机中进行运算调度的最小单位，包含在进程之中，是进程中的实际运作单位，一条线程指的是进程中
一个单一顺序控制流，一个进程可以并发多个线程，每个线程执行不同的任务
线程简单来说是一组指令

进程：
一个程序正在执行的实例叫做进程
一个应用程序以一个整体的形式暴露给操作系统，是各种资源的集合
进程的具体功能是通过线程来实现的，要执行也得通过线程
所有在同一个进程中的线程是共享同一块内存空间的


进程和线程的区别：
  进程占用独立内存空间，线程可以共享一块内存空间
  多个子进程之间数据不共享，都只是对父进程数据的复制
  同一个进程的线程之间可以互相交流，两个进程想通信，必须通过一个中间代理来实现
  创建新线程很简单，创建新进程需要对其父进程进行一次克隆
  一个线程可以控制和操作同一进程里的其他线程，但进程只能操作子进程

GIL(global interpreter lock):cpython 的全局解释器锁
无论你启多少个线程，你有多少个cpu, cPython在执行的时候会在同一时刻只允许一个线程运行







#Downtiser
#实现多线程
import threading #导入多线程模块
import time

def task(n):
    print('this is the task',n)
    time.sleep(2)

t1 = threading.Thread(target=task,args=('thread1',))  #创建线程1


t2 = threading.Thread(target=task, args=('thread2',)) #创建线程2

t1.start() #启动线程
t2.start()



#Downtiser
import threading, time
#通过定义类创建多线程实例

class MyThreading(threading.Thread):  #继承Thread类
    def __init__(self,n):
        super(MyThreading,self).__init__()
        self.n = n

    def run(self):  #只能把方法名定义为run
        print('this is the task',self.n)
        time.sleep(2.5)

t1 = MyThreading(1)
t2 = MyThreading(2)

t1.start()
t2.start()

#Downtiser
#大批量子线程
import threading
import time
import sys
lock = threading.Lock()
def task(n):
    lock.acquire()
    sys.stdout.write('this is task %s\n'%n)  #通过标准输出可以避免多个线程竞争控制台输出而导致输出混乱
    lock.release()
    #time.sleep(2)
thread_list = []
#start_time = time.time()
for i in range(1,21):
    t = threading.Thread(target=task, args=(i,))
    thread_list.append(t) #将线程实例存入列表中
    t.start()
#time.sleep(0.1)
print('the current thread is',threading.current_thread()) #获取执行此语句的线程，即主线程
print('the active thread amount is ',threading.active_count()) #统计当前活跃的线程数
for t in thread_list:
    t.join() #等待子线程运行完毕

#t.join() #等待子线程运行完毕
#print('cost>>>',time.time()-start_time)



#Downtiser
import threading
import time
#守护进程
#守护线程只有当主线程活跃时才存在，随主线程的死亡而死亡
def task(n):
    print('this is task', n)
    time.sleep(2)
thread_list = []
start_time = time.time()
for i in range(1,21):
    t = threading.Thread(target=task, args=(i,))
    t.setDaemon(True)  #设定该线程为守护线程，主线程不会等待守护线程结束再结束
    thread_list.append(t)
    t.start()
time.sleep(0.1)
print('the current thread is',threading.current_thread())
print('the active thread amount is ',threading.active_count())
# for t in thread_list:
#     t.join()


print('cost>>>',time.time()-start_time)


