#队列类似于列表，是一个序列，区别是队列中的元素取出后，队列中就不再有这个元素了
#Downtiser
import queue  #导入队列模块

q = queue.Queue(maxsize=10) #生成先入先出队列实例,并指定最大长度
q.put('disk1') #往队列中放入第一个元素，若超过最大长度会卡住
q.put('disk2')
q.put('disk3')
print(q.qsize()) #返回队列中有几个元素
print(q.get())
#先入先出，不能指定取出某个元素，且取出这个元素后队列中就没有这个元素,取完之后若再取线程会卡住，等待下一个元素进入
#可以设置get的block参数为False就不会再卡死，设置timeout=1之类指定等待时间
print(q.qsize())
q.get()
q.get()
q.get_nowait() #若队列已经被取完，则抛出异常，不会卡住


#Downtiser
import queue

q = queue.LifoQueue()  #创建后入先出队列
q.put(1)
q.put(2)
q.put(3)
print(q.get())  #此时获取最后一个元素

q2 = queue.PriorityQueue()  #创建优先级队列
q2.put((1,'p1')) #设置优先级和元素为一个元组，比较时比较该元组的第一个元素，可以是字符串或数字,越小优先级越高
q2.put((5,'p2'))
q2.put((3,'p3'))
q2.put((10,'p4'))

while True:
    try:
        print(q2.get())
    except queue.Empty:
        break


#生产者与消费者模型
#Downtiser
#生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，
# 所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，
# 消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力

import threading, time, queue, sys
q = queue.Queue(10)
def Producer(name):
    count = 1
    while True:
        q.put('商品%s'%(count))
        sys.stdout.write('生产者%s 生产了商品%s\n'%(name, count))
        count += 1
        time.sleep(0.8)


def Consumer(name):
    count = 1
    while True:
        sys.stdout.write('%s 买走了商品 %s\n'%(name, q.get()))
        time.sleep(2)


p = threading.Thread(target=Producer, args=('downtiser',))
c = threading.Thread(target=Consumer, args=('noob',))
c2 = threading.Thread(target=Consumer, args=('idiot',))
p.start()
c.start()
c2.start()
